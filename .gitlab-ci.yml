variables:
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_PATH

.before-script-vcpkg-windows: &before-script-vcpkg-windows
  - Push-Location
  - git submodule update --init vcpkg-registry
  - $vcpkg_repository=Select-String -Path "vcpkg-configuration.json" -Pattern '"repository":\s"(.+?)"' | ForEach-Object { $_.Matches.Groups[1].Value }
  - if (-not (Test-Path -Path "$Env:VCPKG_LOCAL_GIT")) { git clone $vcpkg_repository $Env:VCPKG_LOCAL_GIT }
  - $baseline=Select-String -Path "vcpkg-configuration.json" -Pattern '"baseline":\s"(.+?)"' | ForEach-Object { $_.Matches.Groups[1].Value }
  - cd "$Env:VCPKG_LOCAL_GIT"
  - git remote set-url origin $vcpkg_repository
  - git fetch
  - git checkout $baseline
  - Pop-Location
  - $vcpkg_tag = (Get-Content $Env:VCPKG_LOCAL_GIT\scripts\vcpkg-tool-metadata.txt) | Select-String -Pattern '^VCPKG_TOOL_RELEASE_TAG=(.*)'  | %{$_.Matches.Groups[1].value}
  - $url="https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg.exe"
  - mkdir $Env:VCPKG_CACHE_PATH -Force
  - $destination="$Env:VCPKG_CACHE_PATH\vcpkg-$vcpkg_tag.exe"
  - if(-not(Test-Path $destination)){Invoke-WebRequest -Uri $url -OutFile $destination}
  - Copy-Item $destination "$Env:VCPKG_LOCAL_GIT\vcpkg.exe"
  - $Env:LOCALAPPDATA = $Env:GITLAB_LOCALAPPDATA

.before-script-vcpkg-linux: &before-script-vcpkg-linux
  - git submodule update --init vcpkg-registry
  - vcpkg_repository=$(grep -Po '"repository":\s"\K[^"]+' vcpkg-configuration.json)
  - if [ ! -d $VCPKG_LOCAL_GIT ]; then git clone $vcpkg_repository $VCPKG_LOCAL_GIT || exit 1; fi
  - baseline=$(grep -Po '"baseline":\s"\K[^"]+' vcpkg-configuration.json)
  - cd "$VCPKG_LOCAL_GIT"
  - git remote set-url origin $vcpkg_repository
  - git fetch
  - git checkout $baseline
  - cd -
  - vcpkg_tag=$(sed -n 's/^VCPKG_TOOL_RELEASE_TAG=\(.*\)/\1/p' < "$VCPKG_LOCAL_GIT/scripts/vcpkg-tool-metadata.txt")
  - mkdir -p $VCPKG_CACHE_PATH
  - destination="$VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag"
  - if [ ! -f "$destination" ]; then wget -O "$destination" "https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg-glibc" || exit 1; chmod +x "$destination"; fi
  - cp $destination "$VCPKG_LOCAL_GIT/vcpkg" || exit 1

.after-script-clean-vcpkg-windows: &after-script-clean-vcpkg-windows
  - (Remove-Item -LiteralPath "$Env:VCPKG_BUILDTREE" -Force -Recurse -ErrorAction SilentlyContinue) || ($LASTEXITCODE=0)
  - (Remove-Item -LiteralPath "$Env:VCPKG_LOCAL_GIT/packages" -Force -Recurse -ErrorAction SilentlyContinue) || ($LASTEXITCODE=0)

.after-script-clean-vcpkg-linux: &after-script-clean-vcpkg-linux
  - rm -Rf "$VCPKG_LOCAL_GIT/buildtrees"
  - rm -Rf "$VCPKG_LOCAL_GIT/packages"

.python-venv-windows: &python-venv-windows
  - $Env:CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python.exe -m venv .venv
  - ./.venv/Scripts/Activate.ps1
  - python.exe -m ensurepip
  - python.exe -m pip install --upgrade pip
  - python.exe -m pip install -r requirements-gitlab.txt

.python-venv-windows-d: &python-venv-windows-d
  - $Env:CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python_d.exe -m venv .venv
  - ./.venv/Scripts/Activate.ps1
  - python_d.exe -m ensurepip
  - python_d.exe -m pip install --upgrade pip
  - python_d.exe -m pip install -r requirements-gitlab.txt

.python-venv-linux: &python-venv-linux
  - export CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python -m venv .venv
  - source .venv/bin/activate
  - python -m ensurepip
  - python -m pip install --upgrade pip
  - python -m pip install -r requirements-gitlab.txt

.python-venv-linux-d: &python-venv-linux-d
  - export CMAKE_BUILD_PARALLEL_LEVEL=$NUM_PARALLEL
  - python3d -m venv .venv
  - source .venv/bin/activate
  - python3d -m ensurepip
  - python3d -m pip install --upgrade pip
  - python3d -m pip install -r requirements-gitlab.txt

workflow:
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE != "merge_request_event"

stages:
  - build
  - format
  - doc
  - tag

doc:doxygen:
  stage: doc
  needs: []
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/doxygen:latest
  script:
    - doxygen doc/Doxyfile
    - mv doc/html public
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 1 day

.plantuml-all-cleanup: &plantuml-all-cleanup # Remove template
  - sed -i 's/<template<[^>]*>>//' doc/plantuml/architecture.puml
  # Vector3D and Transform has too many relation
  - sed -i 's/.* \*-- urx\.Vector3D//' doc/plantuml/architecture.puml
  - sed -i 's/.* \*-- urx\.Transform//' doc/plantuml/architecture.puml
  # Vector3D is always double
  - sed -i 's/Vector3D<double>/Vector3D/' doc/plantuml/architecture.puml
  # Type for Vector2D and Vector3D are always double
  - sed -i 's/\( :\s\)T$/\1double/' doc/plantuml/architecture.puml
  # Remove number of connections
  - sed -i -E 's/ "[0-9]+" \*--/ *--/' doc/plantuml/architecture.puml
  # Only show relation between shared_ptr and class. Remove weak_ptr relations.
  - sed -i -E 's/^urx\..*TransmitSetup \*-- urx\.Excitation$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^urx\..*GroupData \*-- urx\..*Group$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^urx\..*ReceiveSetup \*-- urx\.Probe$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^urx\..*TransmitSetup \*-- urx\.Probe$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^urx\.Element \*-- urx\.ElementGeometry$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^urx\.Element \*-- urx\.ImpulseResponse$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^urx\.RawDataNoInit \*-- urx\.DataType$//' doc/plantuml/architecture.puml
  - sed -i -E 's/^urx\.RawDataVector \*-- urx\.DataType$//' doc/plantuml/architecture.puml
  # Remove detail namespace
  - sed -i 's/detail\.//g' doc/plantuml/architecture.puml
  - sed -i 's/namespace detail {//' doc/plantuml/architecture.puml
  - sed -i -z 's/\t\t\}\n\t\}/\t\}/g' doc/plantuml/architecture.puml
  # Remove destructor
  - sed -i -z "s/\n[^~\n]*~[^\n]*\n/\n/g" doc/plantuml/architecture.puml

doc:plantuml:
  stage: doc
  needs: []
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/hpp2plantuml:latest
  script:
    - mkdir -p doc/plantuml
    - hpp2plantuml -i "urx/*.h" -o doc/plantuml/architecture.puml
    - *plantuml-all-cleanup
    - cp doc/plantuml/architecture.puml doc/plantuml/architecture_user.puml
    # Remove every function (operator!= and operator==)
    - sed -i -E -z "s/\n[^\n]+\([^\n]*\)[^\n]*//g" doc/plantuml/architecture_user.puml
    # Replace weak_ptr / shared_ptr by raw
    - sed -i 's/std::weak_ptr<\([^>]*\)>/\1/' doc/plantuml/architecture_user.puml
    - sed -i 's/std::shared_ptr<\([^>]*\)>/\1/' doc/plantuml/architecture_user.puml
    # Replace vector by []
    - sed -i 's/std::vector<\([^<>]*\)>/\1[]/' doc/plantuml/architecture_user.puml
    - sed -i 's/std::vector<\([^<>]*\)>/\1[]/' doc/plantuml/architecture_user.puml
    # Remove std::
    - sed -i 's/std:://' doc/plantuml/architecture_user.puml
    # Don't show C type
    - sed -i -E 's/(int[0-9]+)_t/\1/' doc/plantuml/architecture_user.puml
    # Merge AcquisitionBase and Acquisition
    - sed -i -E -z "s/\s+class Acquisition\s+\{\s+([^\}]*)}\s+class AcquisitionBase\s+\{([^\}]*)}/\nclass Acquisition{\2\1}/g" doc/plantuml/architecture_user.puml
    - sed -i 's/^urx\.AcquisitionBase.*-- .*urx\.Acquisition$//g' doc/plantuml/architecture_user.puml
    - sed -i 's/^urx\.AcquisitionBase.*-- .*urx\.Group$//g' doc/plantuml/architecture_user.puml
    - sed -i 's/AcquisitionBase/Acquisition/g' doc/plantuml/architecture_user.puml
    # Generate image
    - mkdir -p public/plantuml
    - plantuml doc/plantuml/architecture_user.puml
    - plantuml -tsvg doc/plantuml/architecture_user.puml
    - mv doc/plantuml/architecture_user.* public/plantuml/
    # Generate C++ documentation
    - hpp2plantuml -i "urx/*.h" -i urx/detail/raw_data.h -o doc/plantuml/architecture.puml
    - *plantuml-all-cleanup
    - cp doc/plantuml/architecture.puml doc/plantuml/architecture_cpp.puml
    # Remove only comparison operator
    - sed -i -E -z 's/\n[^\n]*operator[^\n]*//g' doc/plantuml/architecture_cpp.puml
    # Remove metaprogramming struct
    - sed -i -E -z 's/\n[^\n]*IsComplex[^}]*}//g' doc/plantuml/architecture_cpp.puml
    # Only show relation between shared_ptr and class. Remove weak_ptr relations.
    - sed -i -E 's/^urx\..*Acquisition \*-- urx\..*Group$//' doc/plantuml/architecture_cpp.puml
    # Generate image
    - plantuml doc/plantuml/architecture_cpp.puml
    - plantuml -tsvg doc/plantuml/architecture_cpp.puml
    - mv doc/plantuml/architecture_cpp.* public/plantuml/
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 1 day

format:clang-format:
  stage: format
  needs: []
  tags:
    - ubuntu
    - clang-format
  script:
    - find . -type f -name "*.cpp" -or -name "*.cc" -or -name "*.hpp" -or -name "*.h" |xargs clang-format-17 --style=file --dry-run --Werror

format:cmake-format:
  stage: format
  needs: []
  tags:
    - ubuntu
    - cmake-format
  script:
    - find . -name "CMakeLists.txt" | xargs cmake-format -i
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please, format your CMake files."; echo "$(git status --porcelain)"; exit 1; fi

format:clang-tidy:
  stage: format
  needs:
    - build:ubuntu-with-HDF5-static
  tags:
    - ubuntu
    - clang-tidy
  script:
    - cd CI
    - mkdir -p $(grep -Po '"directory":\s"\K[^"]+' compile_commands.json | sort -u)
    - CLANG_TIDY_CACHE_BINARY=/usr/bin/clang-tidy-17 run-clang-tidy-17 -clang-tidy-binary /usr/local/bin/clang-tidy-cache || exit 1

format:iwyu:
  stage: format
  needs:
    - build:ubuntu-with-HDF5-static
  tags:
    - ubuntu
    - iwyu
  script:
    - cd CI
    - mkdir -p $(grep -Po '"directory":\s"\K[^"]+' compile_commands.json | sort -u)
    - cd ..
    - sed -i "s/-Winvalid-pch.*cmake_pch.hxx //g" CI/compile_commands.json
    - iwyu_tool.py -p CI -j $NUM_PARALLEL -- -Xiwyu --no_default_mappings -Xiwyu --mapping_file="$(pwd)/.iwyu-imp" -Xiwyu --no_fwd_decls -Xiwyu --check_also="*urx/matlab/*.h" -Xiwyu --check_also="*urx/python/*.h" -Xiwyu --check_also="*urx/test/*.h" -Xiwyu --check_also="*urx/urx/*.h" > CI/iwyu_tool.log
    - fix_includes.py --nosafe_headers < CI/iwyu_tool.log
    - find . -type f -name "*.cpp" -or -name "*.cc" -or -name "*.hpp" -or -name "*.h" -exec clang-format-17 --style=file -i {} \;
    - git diff > CI/iwyu.patch
    - cat CI/iwyu.patch
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please apply iwyu patch to fix your includes"; exit 1; fi
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - CI/iwyu_tool.log
      - CI/iwyu.patch
    expire_in: 1 day

format:black-format:
  stage: format
  needs: []
  image: $CI_REGISTRY/common/ci/dockerci/black:latest
  tags:
    - docker
  script:
    - mkdir CI
    - black .
    - git diff > CI/format.patch
    - cat CI/format.patch
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please, format your python code with black."; exit 1; fi
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - CI/format.patch
    expire_in: 1 day

tag:version:
  stage: tag
  dependencies:
    - build:ubuntu-with-HDF5-static
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - *before-script-vcpkg-linux
  script:
    - git tag $(cat CI/version.txt)
    - git push --tags
    - bash ./vcpkg-registry/update_vcpkg_registry.sh urx $(cat CI/version.txt) || exit 1
  tags:
    - ubuntu
    - build

build:windows-with-HDF5-static:
  stage: build
  needs: []
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - *python-venv-windows-d
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-wsmep -DVCPKG_HOST_TRIPLET=x64-wsmep -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_PYTHON_WHL:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DENABLE_PCH:BOOL=OFF -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE"
    - *after-script-clean-vcpkg-windows
    - cmake.exe --build CI --config Debug -- /p:CL_MPcount=$NUM_PARALLEL
    - cmake.exe --install CI --config Debug
    - cd CI
    - ctest.exe --output-on-failure -C Debug

build:windows-with-HDF5-shared:
  stage: build
  needs: []
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-wdrep -DVCPKG_HOST_TRIPLET=x64-wdrep -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install" -DBUILD_SHARED_LIBS=ON -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE"
    - *after-script-clean-vcpkg-windows
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
    - cmake.exe --install CI --config Release
    - cd CI
    - ctest.exe --output-on-failure -C Release

build:ubuntu-with-HDF5-static:
  stage: build
  needs: []
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - *python-venv-linux
    - CFLAGS='-fsanitize=undefined,address' CXXFLAGS='-fsanitize=undefined,address' cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-17 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCMAKE_AR=/usr/bin/llvm-ar-17 -DCMAKE_AS=/usr/bin/llvm-as-17 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-17 -DCMAKE_LINKER_TYPE=LLD -DCMAKE_TOOLCHAIN_FILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-lsrp -DVCPKG_HOST_TRIPLET=x64-lsrp -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_PYTHON_WHL:BOOL=ON -DWITH_MATLAB:BOOL=ON -DENABLE_PCH:BOOL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - *after-script-clean-vcpkg-linux
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
    - cmake --install CI --config Release
    - cd CI
    - ctest --output-on-failure -C Release
  artifacts:
    paths:
      - CI/version.txt
      - CI/compile_commands.json
      - CI/vcpkg_installed/x64-lsrp/include
      - CI/urx/config.h
      - CI/urx/utils/urx/utils/export.h
      - CI/matlab/binding/urx/matlab/export.h
      - CI/python/urx/python/export.h
    expire_in: 1 day

build:ubuntu-with-HDF5-shared:
  stage: build
  needs: []
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-ld -DVCPKG_HOST_TRIPLET=x64-ld -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install" -DBUILD_SHARED_LIBS=ON -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - *after-script-clean-vcpkg-linux
    - cmake --build CI --config Debug --parallel $NUM_PARALLEL
    - cmake --install CI --config Debug
    - cd CI
    - ctest --output-on-failure -C Debug

build:ubuntu-without-3rd-party:
  stage: build
  needs: []
  tags:
    - ubuntu
    - build
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="install" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=OFF -DBUILD_TESTING=OFF -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
    - cmake --install CI --config Release
    - cd CI
    - ctest --output-on-failure -C Release

build:windows-python:
  stage: build
  needs: []
  tags:
    - win10
    - python
    - ntfs
  before_script:
    - *before-script-vcpkg-windows
  script:
    - *python-venv-windows
    - python.exe -m pip install . --config-settings="--global-option=CMAKE_TOOLCHAIN_FILE=$Env:VCPKG_LOCAL_GIT\\scripts\\buildsystems\\vcpkg.cmake" --config-settings="--global-option=cmake_build_type=RelWithDebInfo" --config-settings="--global-option=vcpkg_triplet=x64-wsmrep" --no-clean -v
    - *after-script-clean-vcpkg-windows
    - python.exe -m unittest discover test/python

build:ubuntu-python:
  stage: build
  needs: []
  tags:
    - ubuntu
    - python
  before_script:
    - *before-script-vcpkg-linux
  script:
    - *python-venv-linux-d
    - python3d -m pip install . --config-settings="--global-option=CMAKE_TOOLCHAIN_FILE=$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" --config-settings="--global-option=cmake_build_type=Debug" --config-settings="--global-option=vcpkg_triplet=x64-linux" --no-clean -v
    - python3d -m unittest discover test/python
    - stubgen -p pyurx -o python
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Run stubgen -p pyurx -o python before commit."; echo "$(git status --porcelain)"; git diff; exit 1; fi

build:windows-matlab-static:
  stage: build
  needs: []
  tags:
    - matlab
    - win10
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-wsmrep -DVCPKG_HOST_TRIPLET=x64-wsmrep -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DENABLE_PCH:BOOL=OFF -DVCPKG_INSTALL_OPTIONS=--x-buildtrees-root="$Env:VCPKG_BUILDTREE"
    - *after-script-clean-vcpkg-windows
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
    - cmake.exe --install CI --config Release
    - cd test/matlab
    - C:/"Program Files"/MATLAB/R2023b/bin/matlab.exe -wait -batch runTestsCi

build:ubuntu-matlab-static:
  stage: build
  needs: []
  tags:
    - matlab
    - ubuntu
  before_script:
    - *before-script-vcpkg-linux
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-17 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCMAKE_AR=/usr/bin/llvm-ar-17 -DCMAKE_AS=/usr/bin/llvm-as-17 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-17 -DCMAKE_LINKER_TYPE=LLD -DCMAKE_TOOLCHAIN_FILE="$VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-lsrp -DVCPKG_HOST_TRIPLET=x64-lsrp -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="install" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - *after-script-clean-vcpkg-linux
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
    - cmake --install CI --config Release
    - cd test/matlab
    - ssh moduleus@localhost "cd $PWD && /opt/matlab/R2022b/bin/matlab -batch runTestsCi"
  after_script:
    - ssh moduleus@localhost "rm -f $PWD/test/matlab/test.urx"

build:all-python-linux:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    PLAT: manylinux_2_27_x86_64
    # cp313-cp313t: failed to build numpy. Wait official release.
    # cp36-cp36m;cp37-cp37m: not maintained anymore
    SKIP_PYTHON: ;cp313-cp313t;cp36-cp36m;cp37-cp37m;
  stage: build
  needs: []
  when: manual
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/manylinux:latest
  before_script:
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@git.moduleus.com" > ~/.git-credentials
    - *before-script-vcpkg-linux
  script:
    - sh /CI/manylinux_vcpkg.sh pyurx
  artifacts:
    paths:
      - pyurx*manylinux*.whl
    expire_in: 1 day

build:all-python-windows:
  stage: build
  needs: []
  when: manual
  tags:
    - win10
    - python
    - ntfs
  before_script:
    - *before-script-vcpkg-windows
  script:
    - Push-Location
    - Import-Module "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
    - Enter-VsDevShell -VsInstallPath "C:\Program Files\Microsoft Visual Studio\2022\Community" -DevCmdArguments '-arch=x64'
    - Pop-Location
    - *python-venv-windows
    - $Env:CIBW_CONFIG_SETTINGS = "--global-option=CMAKE_TOOLCHAIN_FILE=$Env:VCPKG_LOCAL_GIT/scripts/buildsystems/vcpkg.cmake"
    - python.exe -m pip install cibuildwheel
    - python.exe -m cibuildwheel --output-dir wheelhouse --platform windows
    - *after-script-clean-vcpkg-windows
  artifacts:
    paths:
      - wheelhouse
    expire_in: 1 day
