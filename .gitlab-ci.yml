.before-script-vcpkg-windows: &before-script-vcpkg-windows
  - git submodule update --init vcpkg-registry
  - git clone https://git.moduleus.com/common/sw/3rdparty/vcpkg.git
  - $vcpkg_tag = (Get-Content vcpkg\scripts\vcpkg-tool-metadata.txt) | Select-String -Pattern '^VCPKG_TOOL_RELEASE_TAG=(.*)'  | %{$_.Matches.Groups[1].value}
  - $url="https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg.exe"
  - $destination="$Env:VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag.exe"
  - if(-not(Test-Path $destination)){Invoke-WebRequest -Uri $url -OutFile $destination}
  - Copy-Item $destination vcpkg/vcpkg.exe

.before-script-vcpkg-linux: &before-script-vcpkg-linux
  - git submodule update --init vcpkg-registry
  - git clone https://git.moduleus.com/common/sw/3rdparty/vcpkg.git
  - vcpkg_tag=$(sed -n 's/^VCPKG_TOOL_RELEASE_TAG=\(.*\)/\1/p' < vcpkg/scripts/vcpkg-tool-metadata.txt)
  - if [ ! -f "$VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag" ]; then wget -O "$VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag" "https://github.com/microsoft/vcpkg-tool/releases/download/$vcpkg_tag/vcpkg-glibc" || exit 1; chmod +x "$VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag"; fi
  - cp $VCPKG_CACHE_PATH/vcpkg-$vcpkg_tag vcpkg/vcpkg || exit 1

workflow:
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE != "merge_request_event"

stages:
  - build
  - test
  - format
  - tag
  - install
  - doc

doc:doxygen:
  stage: doc
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/doxygen:latest
  script:
    - doxygen doc/Doxyfile
    - mv doc/html public
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 1 day
  dependencies: []

doc:plantuml:
  stage: doc
  tags:
    - docker
  image: $CI_REGISTRY/common/ci/dockerci/hpp2plantuml:latest
  script:
    - mkdir -p doc/plantuml
    - hpp2plantuml -i "urx/*.h" -o doc/plantuml/architecture.puml
    - sed -r -i "/.+\(.*\).*/d" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*urx\.Acquisition.*\*-- urx.Excitation\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*urx\.Acquisition.*\*-- urx.Group\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*urx\.Acquisition.*\*-- urx.Probe\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*urx\.Acquisition.*\*-- urx.ReceiveSetup\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*urx\.Acquisition.*\*-- urx.Wave\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*\*-- urx.Transform\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*\*-- urx.Vector.*D\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*urx\.Element.*\*-- .*\n\n\n//gm" doc/plantuml/architecture.puml
    - perl -0777 -i -pe "s/^.*urx\.Element.*\*-- .*\n\n\n//gm" doc/plantuml/architecture.puml
    - sed -i 's/std:://g' doc/plantuml/architecture.puml
    - sed -i 's/weak_ptr<\([^>]*\)>/\1*/g' doc/plantuml/architecture.puml
    - sed -i 's/shared_ptr<\([^>]*\)>/\1/g' doc/plantuml/architecture.puml
    - sed -i 's/vector<\(.*\)>/\1[ ]/g' doc/plantuml/architecture.puml
    - sed -i 's/vector<\(.*\)>/\1[ ]/g' doc/plantuml/architecture.puml
    - sed -i 's/DoubleNan/double/g' doc/plantuml/architecture.puml
    # - sed -r -i "/\+--\ urx\.GroupData::VecDataType.*/d" doc/plantuml/architecture.puml
    # - perl -0777 -i -pe "s/^.*class\ GroupData::VecDataType.*\n.*}\n\n//gm" doc/plantuml/architecture.puml
    - mkdir -p public/plantuml
    - plantuml doc/plantuml/architecture.puml
    - mv doc/plantuml/architecture.* public/plantuml/
  allow_failure: true
  artifacts:
    paths:
      - public
    expire_in: 1 day
  dependencies: []

format:clang-format:
  stage: format
  tags:
    - ubuntu
    - clang-format
  script:
    - find . -type f -name "*.cpp" -or -name "*.cc" -or -name "*.hpp" -or -name "*.h" |xargs clang-format-17 --style=file --dry-run --Werror
  dependencies: []

format:cmake-format:
  stage: format
  tags:
    - ubuntu
    - cmake-format
  script:
    - find . -name "CMakeLists.txt" | xargs cmake-format -i
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please, format your CMake files."; echo "$(git status --porcelain)"; exit 1; fi
  dependencies: []

format:clang-tidy:
  stage: format
  tags:
    - ubuntu
    - clang-tidy
  script:
    - cd CI
    - run-clang-tidy-17 || exit 1
  dependencies:
    - build:ubuntu-with-HDF5-static

format:iwyu:
  stage: format
  tags:
    - ubuntu
    - iwyu
  script:
    - sed -i "s/-Winvalid-pch.*cmake_pch.hxx //g" CI/compile_commands.json
    - iwyu_tool.py -p CI -j $NUM_PARALLEL -- -Xiwyu --no_default_mappings -Xiwyu --mapping_file="$(pwd)/.iwyu-imp" -Xiwyu --no_fwd_decls -Xiwyu --check_also="*urx/matlab/*.h" -Xiwyu --check_also="*urx/python/*.h" -Xiwyu --check_also="*urx/test/*.h" -Xiwyu --check_also="*urx/urx/*.h" > CI/iwyu_tool.log
    - fix_includes.py --nosafe_headers < CI/iwyu_tool.log
    - find . -type f -name "*.cpp" -or -name "*.cc" -or -name "*.hpp" -or -name "*.h" -exec clang-format-17 --style=file -i {} \;
    - git diff > CI/iwyu.patch
    - cat CI/iwyu.patch
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please apply iwyu patch to fix your includes"; exit 1; fi
  dependencies:
    - build:ubuntu-with-HDF5-static
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - CI/iwyu_tool.log
      - CI/iwyu.patch
    expire_in: 1 day

format:autopep8-format:
  stage: format
  image: $CI_REGISTRY/common/ci/dockerci/autopep8:latest
  tags:
    - docker
  script:
    - mkdir CI
    - autopep8 -r -i .
    - git diff > CI/format.patch
    - cat CI/format.patch
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Please, format your python code with autopep8."; exit 1; fi
  allow_failure: true
  dependencies: []
  artifacts:
    when: on_failure
    paths:
      - CI/format.patch
    expire_in: 1 day

tag:version:
  stage: tag
  dependencies:
    - build:ubuntu-with-HDF5-shared
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - *before-script-vcpkg-linux
  script:
    - git tag $(cat CI/version.txt)
    - git push --tags
    - bash ./vcpkg-registry/update_vcpkg_registry.sh urx $(cat CI/version.txt) || exit 1
  tags:
    - ubuntu
    - build

build:windows-with-HDF5-static:
  stage: build
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-static-md-env -DVCPKG_HOST_TRIPLET=x64-windows-static-md-env -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DENABLE_PCH:BOOL=OFF
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
  artifacts:
    when: always
    paths:
      - CI
      - urx/config.h
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:windows-with-HDF5-static:
  stage: test
  dependencies:
    - build:windows-with-HDF5-static
  tags:
    - win10
    - test
  script:
    - cd CI
    - ctest --output-on-failure -C Release

install:windows-with-HDF5-static:
  stage: install
  dependencies:
    - build:windows-with-HDF5-static
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - win10
    - build
  script:
    - cmake.exe --install CI --config Release

build:windows-with-HDF5-shared:
  stage: build
  tags:
    - win10
    - build
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-env -DVCPKG_HOST_TRIPLET=x64-windows-env -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=ON -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=OFF
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
  artifacts:
    when: always
    paths:
      - CI
      - urx/config.h
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:windows-with-HDF5-shared:
  stage: test
  dependencies:
    - build:windows-with-HDF5-shared
  tags:
    - win10
    - test
  script:
    - cd CI
    - ctest --output-on-failure -C Release

install:windows-with-HDF5-shared:
  stage: install
  dependencies:
    - build:windows-with-HDF5-shared
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - win10
    - build
  script:
    - cmake.exe --install CI --config Release

build:ubuntu-with-HDF5-static:
  stage: build
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - CFLAGS='-gdwarf-4' CXXFLAGS='-gdwarf-4' cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-17 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCMAKE_AR=/usr/bin/llvm-ar-17 -DCMAKE_AS=/usr/bin/llvm-as-17 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-17 -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-linux -DVCPKG_HOST_TRIPLET=x64-linux -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - VERBOSE=1 cmake --build CI --config Release --parallel $NUM_PARALLEL
  artifacts:
    when: always
    paths:
      - CI
      - urx/config.h
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:ubuntu-with-HDF5-static:
  stage: test
  dependencies:
    - build:ubuntu-with-HDF5-static
  tags:
    - ubuntu
    - build
  script:
    - cd CI
    - ctest --output-on-failure -C Release

install:ubuntu-with-HDF5-static:
  stage: install
  dependencies:
    - build:ubuntu-with-HDF5-static
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - ubuntu
    - build
  script:
    - cmake --install CI --config Release

build:ubuntu-with-HDF5-shared:
  stage: build
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic -DVCPKG_HOST_TRIPLET=x64-linux-dynamic -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=ON -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
  artifacts:
    when: always
    paths:
      - CI
      - urx/config.h
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:ubuntu-with-HDF5-shared:
  stage: test
  dependencies:
    - build:ubuntu-with-HDF5-shared
  tags:
    - ubuntu
    - build
  script:
    - cd CI
    - ctest --output-on-failure -C Release

install:ubuntu-with-HDF5-shared:
  stage: install
  dependencies:
    - build:ubuntu-with-HDF5-shared
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - ubuntu
    - build
  script:
    - cmake --install CI --config Release

# Check only once WITH_HDF5=OFF
build:ubuntu-without-HDF5-static:
  stage: build
  tags:
    - ubuntu
    - build
  before_script:
    - *before-script-vcpkg-linux
  script:
    - cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-linux -DVCPKG_HOST_TRIPLET=x64-linux -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=OFF -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=ON -DWITH_MATLAB:BOOL=OFF -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - cmake --build CI --config Release --parallel $NUM_PARALLEL
  artifacts:
    when: always
    paths:
      - CI
      - urx/config.h
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:ubuntu-without-HDF5-static:
  stage: test
  dependencies:
    - build:ubuntu-without-HDF5-static
  tags:
    - ubuntu
    - build
  script:
    - cd CI
    - ctest --output-on-failure -C Release

build:windows-python:
  stage: build
  dependencies: []
  tags:
    - win10
    - python
  before_script:
    - *before-script-vcpkg-windows
    - pew new CI-urx -r requirements-gitlab.txt
  script:
    - pew in CI-urx pip install . --config-settings="--global-option=CMAKE_TOOLCHAIN_FILE=$($PWD -replace '\\', '\\')\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake cmake_build_type=Release" --no-clean -v
  artifacts:
    when: always
    paths:
      - build
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:windows-python:
  stage: test
  dependencies:
    - build:windows-python
  tags:
    - win10
    - python
  script:
    - pew in CI-urx python -m unittest discover test/python
  after_script:
    - pew rm CI-urx

build:ubuntu-python:
  stage: build
  dependencies: []
  tags:
    - ubuntu
    - python
  before_script:
    - *before-script-vcpkg-linux
    - pew new CI-urx -r requirements-gitlab.txt
  script:
    - pew in CI-urx pip install . --config-settings="--global-option=CMAKE_TOOLCHAIN_FILE=`pwd`/vcpkg/scripts/buildsystems/vcpkg.cmake cmake_build_type=Release" --no-clean -v
  artifacts:
    when: always
    paths:
      - build
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:ubuntu-python:
  stage: test
  dependencies:
    - build:ubuntu-python
  tags:
    - ubuntu
    - build
  script:
    - pew in CI-urx python -m unittest discover test/python
    - pew in CI-urx pybind11-stubgen pyurx --output-dir=python
    - if [[ ! -z "$(git status --porcelain)" ]]; then echo "Run pybind11-stubgen before commit."; echo "$(git status --porcelain)"; git diff; exit 1; fi
  after_script:
    - pew rm CI-urx

build:windows-matlab-static:
  stage: build
  tags:
    - matlab
    - win10
  before_script:
    - *before-script-vcpkg-windows
  script:
    - cmake.exe -S . -B CI -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-static-md-env -DVCPKG_HOST_TRIPLET=x64-windows-static-md-env -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DENABLE_PCH:BOOL=OFF
    - cmake.exe --build CI --config Release -- /p:CL_MPcount=$NUM_PARALLEL
  artifacts:
    when: always
    paths:
      - CI
      - urx/config.h
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:windows-matlab-static:
  stage: test
  dependencies:
    - build:windows-matlab-static
  tags:
    - matlab
    - win10
  script:
    - cd test/matlab
    - C:/"Program Files"/MATLAB/R2023b/bin/matlab.exe -wait -batch runTestsCi

build:ubuntu-matlab-static:
  stage: build
  tags:
    - matlab
    - ubuntu
  before_script:
    - *before-script-vcpkg-linux
  script:
    - CFLAGS='-gdwarf-4' CXXFLAGS='-gdwarf-4' cmake -S . -B CI -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-17 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-17 -DCMAKE_AR=/usr/bin/llvm-ar-17 -DCMAKE_AS=/usr/bin/llvm-as-17 -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-17 -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-linux -DVCPKG_HOST_TRIPLET=x64-linux -DVCPKG_OVERLAY_TRIPLETS=vcpkg-registry/triplets -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" -DBUILD_SHARED_LIBS=OFF -DWITH_HDF5=ON -DBUILD_TESTING=ON -DWITH_PYTHON:BOOL=OFF -DWITH_MATLAB:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
    - VERBOSE=1 cmake --build CI --config Release --parallel $NUM_PARALLEL
  artifacts:
    when: always
    paths:
      - CI
      - urx/config.h
      - vcpkg/buildtrees/**/*.log
    expire_in: 1 day

test:ubuntu-matlab-static:
  stage: test
  dependencies:
    - build:ubuntu-matlab-static
  tags:
    - matlab
    - ubuntu
  script:
    - cd test/matlab
    - ssh moduleus@localhost "cd $PWD && export HDF5_DISABLE_VERSION_CHECK=1 && /opt/matlab/R2022b/bin/matlab -batch runTestsCi"
  after_script:
    - ssh moduleus@localhost "rm -f $PWD/test/matlab/test.urx"
