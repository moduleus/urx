@startuml

' scale 1
' top to bottom direction

' left to right direction


/' Objects '/


namespace urx {

	enum DataType {
		DOUBLE
		FLOAT
		INT16
		INT32
		UNDEFINED
	}

	enum ProbeType {
		CURVILINEAR
		LINEAR
		MATRIX
		RCA
		SPARSE
		UNDEFINED
	}

	enum SamplingType {
		IQ
		RF
		UNDEFINED
	}

	enum WaveType {
		CONVERGING_WAVE
		CYLINDRICAL_WAVE
		DIVERGING_WAVE
		PLANE_WAVE
		UNDEFINED
	}

	class Acquisition <template<class Acquisition>> {
		+sound_speed : double
		+timestamp : double
		+authors : string
		+country_code : string
		+description : string
		+local_time : string
		+system : string
		+groups_data : GroupData<Group>[ ]
		+excitations : Excitation[ ]
		+groups : Group[ ]
		+probes : Probe[ ]
	}

	class Dataset <template<class Excitation, class Group>> {
		+acquisition : Acquisition<Excitation, Group>
		+version : Version
	}

	class Element {
		+transform : Transform
		+element_geometry : ElementGeometry*
		+impulse_response : ImpulseResponse*
	}

	class ElementGeometry {
		+perimeter : Vector3D<double>[ ]
	}

	class Event <template<class TransmitSetup, class ReceiveSetup>> {
		+receive_setup : ReceiveSetup
		+transmit_setup : TransmitSetup
	}

	class Excitation {
		+sampling_frequency : double
		+transmit_frequency : double
		+pulse_shape : string
		+waveform : double[ ]
	}

	class Group <template<class Event>> {
		+data_type : DataType
		+sampling_type : SamplingType
		+description : string
		+sequence : Event[ ]
	}

	class GroupData {
		+group_timestamp : double
		+raw_data : RawData
		+sequence_timestamps : double[ ]
		+event_timestamps : double[ ][ ]
		+group : Group*
	}

	class ImpulseResponse {
		+sampling_frequency : double
		+units : string
		+data : double[ ]
	}

	class Probe {
		+type : ProbeType
		+transform : Transform
		+description : string
		+elements : Element[ ]
		+element_geometries : ElementGeometry[ ]
		+impulse_responses : ImpulseResponse[ ]
	}

	class ReceiveSetup {
		+modulation_frequency : double
		+sampling_frequency : double
		+tgc_sampling_frequency : double
		+probe_transform : Transform
		+tgc_profile : double[ ]
		+active_elements : uint32_t[ ][ ]
		+probe : Probe*
		+number_samples : uint32_t
	}

	class Transform {
		+rotation : Vector3D<double>
		+translation : Vector3D<double>
	}

	class TransmitSetup <template<class Excitation>> {
		+probe_transform : Transform
		+wave : Wave
		+delays : double[ ]
		+active_elements : uint32_t[ ][ ]
		+excitations : Excitation*[ ]
		+probe : Probe*
	}

	class Vector2D <template<typename T>> {
		+x : T
		+y : T
	}

	class Vector3D <template<typename T>> {
		+x : T
		+y : T
		+z : T
	}

	class Version {
		+major : uint16_t
		+minor : uint16_t
		+patch : uint16_t
	}

	class Wave {
		+time_zero : double
		+time_zero_reference_point : Vector3D<double>
		+type : WaveType
		+parameters : double[ ]
	}
}


namespace uac {
	enum Edge {
		RISING
		FALLING
		HIGH
		LOW
		UNDEFINED
	}

	class Acquisition {
		+hw_config : HwConfig
		+trigger_in : TriggerIn
		+trigger_out : Trigger
		+super_groups : SuperGroup[ ]
		+initial_group : IGroup*
	}

	class DestinationLink {
		+trigger : TriggerIn
		+destination : IGroup*
	}

	class Event {
		+hw_config : HwConfig
		+trigger_in : TriggerIn
		+trigger_out : Trigger
		+time_offset : urx::double
	}

	class Excitation {
		+hw_config : HwConfig
	}

	class Group {
	}

	class HwConfig {
		+values : unordered_map<string, VecDataTypeVariant>
	}

	abstract class IGroup {
		+hw_config : HwConfig
		+trigger_in : TriggerIn
		+trigger_out : Trigger
		+destinations : DestinationLink[ ]
		+repetition_count : uint32_t
		+period : urx::double
	}

	class ReceiveSetup {
		+hw_config : HwConfig
	}

	class SuperGroup {
		+initial_group : IGroup*
	}

	class TransmitSetup {
		+hw_config : HwConfig
	}

	class Trigger {
		+channel : string
		+pulse_duration : urx::double
		+time_offset : urx::double
	}

	class TriggerIn {
		+edge : Edge
	}
}





/' Inheritance relationships '/

urx.Acquisition <|-- uac.Acquisition


urx.Event <|-- uac.Event


urx.Excitation <|-- uac.Excitation


urx.Group <|-- uac.Group


uac.IGroup <|-- uac.Group


uac.IGroup <|-- uac.SuperGroup


urx.ReceiveSetup <|-- uac.ReceiveSetup


urx.TransmitSetup <|-- uac.TransmitSetup


uac.Trigger <|-- uac.TriggerIn




/' Aggregation relationships '/

urx.Acquisition  *-- urx.GroupData
urx.Acquisition  *-- urx.Probe
urx.Acquisition  *-- urx.Group
urx.Acquisition  *-- urx.Excitation

urx.Dataset  *-- urx.Acquisition
urx.Dataset  *-- urx.Version

' urx.ElementGeometry *-- urx.Vector3D

urx.Element *-- urx.ElementGeometry
urx.Element *-- urx.ImpulseResponse
' urx.Element *-- urx.Transform

urx.Event  *-- urx.ReceiveSetup
urx.Event  *-- urx.TransmitSetup

urx.GroupData *-- urx.Group

urx.Group *-- urx.Event
urx.Group  *-- urx.DataType
urx.Group  *-- urx.SamplingType

urx.Probe *-- urx.Element
urx.Probe *-- urx.ElementGeometry
urx.Probe *-- urx.ImpulseResponse
urx.Probe *-- urx.ProbeType

urx.ReceiveSetup *-- urx.Probe
' urx.ReceiveSetup *-- urx.Transform

' urx.Transform *-- urx.Vector3D

urx.TransmitSetup *-- urx.Probe
urx.TransmitSetup *-- urx.Wave
urx.TransmitSetup *-- urx.Excitation

urx.Wave *-- urx.WaveType
' urx.Wave *-- urx.Vector3D



uac.Acquisition *-- uac.IGroup
uac.Acquisition *-- uac.SuperGroup
uac.Acquisition *-- uac.Trigger
uac.Acquisition *-- uac.TriggerIn
uac.Acquisition *-- uac.HwConfig

uac.DestinationLink *-- uac.IGroup
uac.DestinationLink *-- uac.TriggerIn

uac.Event  *-- uac.HwConfig
uac.Event  *-- uac.Trigger
uac.Event  *-- uac.TriggerIn

uac.Excitation  *-- uac.HwConfig

uac.IGroup *-- uac.DestinationLink
uac.IGroup *-- uac.HwConfig
uac.IGroup  *-- uac.Trigger
uac.IGroup  *-- uac.TriggerIn

uac.ReceiveSetup  *-- uac.HwConfig

uac.SuperGroup *-- uac.IGroup

uac.TransmitSetup  *-- uac.HwConfig

uac.TriggerIn  *-- uac.Edge



@enduml
